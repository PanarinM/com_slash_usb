using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Ports;
using System.Windows.Forms;

namespace MeasureComplexInterface
{
    
    public partial class Form1 : Form
    {
        public TurbineData Turbine { get; set; }
        public ScriptData TachoData { get; set; }
        public ScriptData WE2107Data { get; set; }
        public int SamplingRate { get; set; }
        public string WE2107COM { get; set; }
        public string UT61bCOM { get; set; }

        public string OutUT372 { get; set; }
        public string OutUT61b { get; set; }
        public string OutWE2107 { get; set; }
        public string OutTurbinePower { get; set; }
        public string OutBreakoutTorque { get; set; }

        public System.Timers.Timer timer;
        public Form1()
        {
            InitializeComponent();
            SetComLists();
            TachoData = new ScriptData("../../../../tacho_read.py", "");
            WE2107Data = new ScriptData("../../../../serial_read.py", WE2107COM);
        }

        void SetComLists()
        {
            var ports = SerialPort.GetPortNames();
            comboBoxMultiCOM.DataSource = comboBoxPSCOM.DataSource = ports;
        }
        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            bool bHandled = false;
            switch (keyData)
            {
                case Keys.F5:

                    bHandled = true;
                    break;
            }
            return bHandled;
        }
        private void rButtonPowerWind_CheckedChanged(object sender, EventArgs e)
        {
            rButtonTorqueWind.Checked = false;
            rButtonPowerWind.Checked = true;

        }

        private void rButtonTorqueWind_CheckedChanged(object sender, EventArgs e)
        {
            rButtonPowerWind.Checked = false;
            rButtonTorqueWind.Checked = true;
        }

        private void buttonShowChart_Click(object sender, EventArgs e)
        {
            
        }

        private void buttonStart_Click(object sender, EventArgs e)
        {
            while (1 == 1)
            {
                outTacho.Text = TachoData.GetData();
                outPS.Text = WE2107Data.GetData();
                Refresh();
            }
                      
            //MessageBox.Show("You faggot");
        }

        private void textBoxSamplingTime_TextChanged(object sender, EventArgs e)
        {
        }

        private void textBoxTurbineDiameter_TextChanged(object sender, EventArgs e)
        {
            Turbine.Diameter = e.ToString();
        }

        private void comboBoxRotorType_SelectedIndexChanged(object sender, EventArgs e)
        {
            Turbine.RotorType = ((ComboBox)sender).SelectedItem.ToString();
        }

        private void numericUpDown1_ValueChanged(object sender, EventArgs e)
        {
            SamplingRate = Convert.ToInt32(((NumericUpDown)sender).Value.ToString());
        }

        private void outPS_Click(object sender, EventArgs e)
        {

        }
    }
    public class TurbineData
    {
        public string RotorType { get; set; }
        public string VaneHeight { get; set; }
        public string VaneWidth { get; set; }
        public string Diameter { get; set; }
    }

    public class ScriptData
    {
        public string Response { get; private set; }
        public string ScriptPath { get; private set; }
        public string Arguments { get; private set; }
        public string PythonPath => "C:/Program Files/Python36/python.exe";
        public System.Timers.Timer timer;
        public ScriptData(string scriptPath, string args)
        {
            ScriptPath = scriptPath;
            Arguments = args;
        }
        public string GetData()
        {

            var response = string.Empty;
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = PythonPath;
            start.Arguments = string.Format("\"{0}\" \"{1}\"", ScriptPath, Arguments);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    Response = reader.ReadToEnd(); ;
                }
            }
            
            return Response;
        }
    }

}
